// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: account.sql

package db

import (
	"context"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO account (owner, balanace, currency)
VALUES ($1, $2, $3) RETURNING id, owner, balanace, currency, created_at
`

type CreateAccountParams struct {
	Owner    string `json:"owner"`
	Balanace int64  `json:"balanace"`
	Currency string `json:"currency"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, createAccount, arg.Owner, arg.Balanace, arg.Currency)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Balanace,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :exec
DELETE FROM account
WHERE id = $1
`

func (q *Queries) DeleteAccount(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAccount, id)
	return err
}

const updateAccount = `-- name: UpdateAccount :one
UPDATE account
set balanace = $2
WHERE id = $1 RETURNING id, owner, balanace, currency, created_at
`

type UpdateAccountParams struct {
	ID       int64 `json:"id"`
	Balanace int64 `json:"balanace"`
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, updateAccount, arg.ID, arg.Balanace)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Balanace,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}
